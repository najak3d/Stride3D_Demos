
#define UsCornetteShanks 1

shader AtmosphereRenderSkyCommon<bool MultiScatteringApproximationEnabled, MemberName AtmosphereGroup> : AtmosphereCommon<AtmosphereGroup>, Math
{
	float3 GetMultipleScattering(AtmosphereParameters Atmosphere, float3 scattering, float3 extinction, float3 worlPos, float viewZenithCosAngle)
	{
		float2 uv = saturate(float2(viewZenithCosAngle*0.5f + 0.5f, (length(worlPos) - Atmosphere.BottomRadius) / (Atmosphere.TopRadius - Atmosphere.BottomRadius)));
		uv = float2(fromUnitToSubUvs(uv.x, MultiScatteringLutResolution.x), fromUnitToSubUvs(uv.y, MultiScatteringLutResolution.y));

		float3 multiScatteredLuminance = MultiScatTexture.SampleLevel(samplerLinearClamp, uv, 0).rgb;
		return multiScatteredLuminance;
	}

    bool MoveToTopAtmosphere(inout float3 WorldPos, in float3 WorldDir, in float AtmosphereTopRadius)
	{
		float viewHeight = length(WorldPos);
		if (viewHeight > AtmosphereTopRadius)
		{
			float tTop = RaySphereIntersectNearest(WorldPos, WorldDir, float3(0.0f, 0.0f, 0.0f), AtmosphereTopRadius);
			if (tTop >= 0.0f)
			{
				float3 UpVector = WorldPos / viewHeight;
				float3 UpOffset = UpVector * -0.01f;
				WorldPos = WorldPos + WorldDir * tTop + UpOffset;
			}
			else
			{
				// Ray is not intersecting the atmosphere
				return false;
			}
		}
		return true; // ok to start tracing
	}

	float RayleighPhase(float cosTheta)
	{
		float factor = 3.0f / (16.0f * PI);
		return factor * (1.0f + cosTheta * cosTheta);
	}

	float CornetteShanksMiePhaseFunction(float g, float cosTheta)
	{
		float k = 3.0 / (8.0 * PI) * (1.0 - g * g) / (2.0 + g * g);
		return k * (1.0 + cosTheta * cosTheta) / pow(1.0 + g * g - 2.0 * g * -cosTheta, 1.5);
	}

	float hgPhase(float g, float cosTheta)
	{
		if (UsCornetteShanks)
		{
			return CornetteShanksMiePhaseFunction(g, cosTheta);
		}
		else
		{
			// Reference implementation (i.e. not schlick approximation). 
			// See http://www.pbr-book.org/3ed-2018/Volume_Scattering/Phase_Functions.html
			float numer = 1.0f - g * g;
			float denom = 1.0f + g * g + 2.0f * g * cosTheta;
			return numer / (4.0f * PI * denom * sqrt(denom));
		}
	}

	float dualLobPhase(float g0, float g1, float w, float cosTheta)
	{
		return lerp(hgPhase(g0, cosTheta), hgPhase(g1, cosTheta), w);
	}

	float uniformPhase()
	{
		return 1.0f / (4.0f * PI);
	}

	float getAlbedo(float scattering, float extinction)
	{
		return scattering / max(0.001, extinction);
	}

	float3 getAlbedo(float3 scattering, float3 extinction)
	{
		return scattering / max(0.001, extinction);
	}

	struct MediumSampleRGB
	{
		float3 scattering;
		float3 absorption;
		float3 extinction;

		float3 scatteringMie;
		float3 absorptionMie;
		float3 extinctionMie;

		float3 scatteringRay;
		float3 absorptionRay;
		float3 extinctionRay;

		float3 scatteringOzo;
		float3 absorptionOzo;
		float3 extinctionOzo;

		float3 albedo;
	};

	MediumSampleRGB sampleMediumRGB(in float3 WorldPos, in AtmosphereParameters Atmosphere)
	{
		const float viewHeight = length(WorldPos) - Atmosphere.BottomRadius;

		const float densityMie = exp(Atmosphere.MieDensityExpScale * viewHeight);
		const float densityRay = exp(Atmosphere.RayleighDensityExpScale * viewHeight);
		const float densityOzo = saturate(viewHeight < Atmosphere.AbsorptionDensity0LayerWidth ?
			Atmosphere.AbsorptionDensity0LinearTerm * viewHeight + Atmosphere.AbsorptionDensity0ConstantTerm :
			Atmosphere.AbsorptionDensity1LinearTerm * viewHeight + Atmosphere.AbsorptionDensity1ConstantTerm);

		MediumSampleRGB s;

		s.scatteringMie = densityMie * Atmosphere.MieScattering;
		s.absorptionMie = densityMie * Atmosphere.MieAbsorption;
		s.extinctionMie = densityMie * Atmosphere.MieExtinction;

		s.scatteringRay = densityRay * Atmosphere.RayleighScattering;
		s.absorptionRay = 0.0f;
		s.extinctionRay = s.scatteringRay + s.absorptionRay;

		s.scatteringOzo = 0.0;
		s.absorptionOzo = densityOzo * Atmosphere.AbsorptionExtinction;
		s.extinctionOzo = s.scatteringOzo + s.absorptionOzo;

		s.scattering = s.scatteringMie + s.scatteringRay + s.scatteringOzo;
		s.absorption = s.absorptionMie + s.absorptionRay + s.absorptionOzo;
		s.extinction = s.extinctionMie + s.extinctionRay + s.extinctionOzo;
		s.albedo = getAlbedo(s.scattering, s.extinction);

		return s;
	}

	struct SingleScatteringResult
	{
		float3 L;						// Scattered light (luminance)
		float3 OpticalDepth;			// Optical depth (1/m)
		float3 Transmittance;			// Transmittance in [0,1] (unitless)
		float3 MultiScatAs1;

		float3 NewMultiScatStep0Out;
		float3 NewMultiScatStep1Out;
	};

	SingleScatteringResult IntegrateScatteredLuminance(
		in float2 pixPos, in float3 WorldPos, in float3 WorldDir, in float3 SunDir, in AtmosphereParameters Atmosphere,
		in bool ground, in float SampleCountIni, in float DepthBufferValue, in bool VariableSampleCount,
		in bool MieRayPhase, in float AerialPespectiveDistanceScale, in float tMaxMax = 9000000.0f)
	{
		SingleScatteringResult result = (SingleScatteringResult)0;

		float3 ClipSpace = float3((pixPos / float2(Resolution)) * float2(2.0, -2.0) - float2(1.0, -1.0), 1.0);

		// Compute next intersection with atmosphere or ground 
		float3 earthO = float3(0.0f, 0.0f, 0.0f);
		float tBottom = RaySphereIntersectNearest(WorldPos, WorldDir, earthO, Atmosphere.BottomRadius);
		float tTop = RaySphereIntersectNearest(WorldPos, WorldDir, earthO, Atmosphere.TopRadius);
		float tMax = 0.0f;
		if (tBottom < 0.0f)
		{
			if (tTop < 0.0f)
			{
				tMax = 0.0f; // No intersection with earth nor atmosphere: stop right away  
				return result;
			}
			else
			{
				tMax = tTop;
			}
		}
		else
		{
			if (tTop > 0.0f)
			{
				tMax = min(tTop, tBottom);
			}
		}

		if (DepthBufferValue >= 0.0f)
		{
			ClipSpace.z = DepthBufferValue;
			if (ClipSpace.z < 1.0f)
			{
				float4 DepthBufferWorldPos = mul(float4(ClipSpace, 1.0), InvViewProjectionMatrix);
				DepthBufferWorldPos /= DepthBufferWorldPos.w;

				DepthBufferWorldPos.xyz *= ScaleToSkyUnit;

				float tDepth = length(DepthBufferWorldPos.xyz - (WorldPos + float3(0.0, -Atmosphere.BottomRadius, 0.0))); // apply earth offset to go back to origin as top of earth mode. 
				if (tDepth < tMax)
				{
					tMax = tDepth;
				}
			}
			//		if (VariableSampleCount && ClipSpace.z == 1.0f)
			//			return result;
		}
		tMax = min(tMax, tMaxMax);

		// Sample count 
		float SampleCount = SampleCountIni;
		float SampleCountFloor = SampleCountIni;
		float tMaxFloor = tMax;
		if (VariableSampleCount)
		{
			SampleCount = lerp(RayMarchMinMaxSPP.x, RayMarchMinMaxSPP.y, saturate(tMax*0.01));
			SampleCountFloor = floor(SampleCount);
			tMaxFloor = tMax * SampleCountFloor / SampleCount;	// rescale tMax to map to the last entire step segment.
		}
		float dt = tMax / SampleCount;

		// Phase functions
		const float uniformPhase = 1.0 / (4.0 * PI);
		const float3 wi = SunDir;
		const float3 wo = WorldDir;
		float cosTheta = dot(wi, wo);
		float MiePhaseValue = hgPhase(Atmosphere.MiePhaseG, -cosTheta);	// mnegate cosTheta because due to WorldDir being a "in" direction. 
		float RayleighPhaseValue = RayleighPhase(cosTheta);

	#ifdef ILLUMINANCE_IS_ONE
		// When building the scattering factor, we assume light illuminance is 1 to compute a transfert function relative to identity illuminance of 1.
		// This make the scattering factor independent of the light. It is now only linked to the atmosphere properties.
		float3 globalL = 1.0f;
	#else
		float3 globalL = SunIlluminance;
	#endif

		// Ray march the atmosphere to integrate optical depth
		float3 L = 0.0f;
		float3 throughput = 1.0;
		float3 OpticalDepth = 0.0;
		float t = 0.0f;
		float tPrev = 0.0;
		const float SampleSegmentT = 0.3f;
		for (float s = 0.0f; s < SampleCount; s += 1.0f)
		{
			if (VariableSampleCount)
			{
				// More expenssive but artefact free
				float t0 = (s) / SampleCountFloor;
				float t1 = (s + 1.0f) / SampleCountFloor;
				// Non linear distribution of sample within the range.
				t0 = t0 * t0;
				t1 = t1 * t1;
				// Make t0 and t1 world space distances.
				t0 = tMaxFloor * t0;
				if (t1 > 1.0)
				{
					t1 = tMax;
					//	t1 = tMaxFloor;	// this reveal depth slices
				}
				else
				{
					t1 = tMaxFloor * t1;
				}
				//t = t0 + (t1 - t0) * (whangHashNoise(pixPos.x, pixPos.y, gFrameId * 1920 * 1080)); // With dithering required to hide some sampling artefact relying on TAA later? This may even allow volumetric shadow?
				t = t0 + (t1 - t0)*SampleSegmentT;
				dt = t1 - t0;
			}
			else
			{
				//t = tMax * (s + SampleSegmentT) / SampleCount;
				// Exact difference, important for accuracy of multiple scattering
				float NewT = tMax * (s + SampleSegmentT) / SampleCount;
				dt = NewT - t;
				t = NewT;
			}
			float3 P = WorldPos + t * WorldDir;

			MediumSampleRGB medium = sampleMediumRGB(P, Atmosphere);
			const float3 SampleOpticalDepth = medium.extinction * dt * AerialPespectiveDistanceScale;
			const float3 SampleTransmittance = exp(-SampleOpticalDepth);
			OpticalDepth += SampleOpticalDepth;

			float pHeight = length(P);
			const float3 UpVector = P / pHeight;
			float SunZenithCosAngle = dot(SunDir, UpVector);
			float2 uv;
			LutTransmittanceParamsToUv(Atmosphere, pHeight, SunZenithCosAngle, uv);
			float3 TransmittanceToSun = TransmittanceLutTexture.SampleLevel(samplerLinearClamp, uv, 0).rgb;

			float3 PhaseTimesScattering;
			if (MieRayPhase)
			{
				PhaseTimesScattering = medium.scatteringMie * MiePhaseValue + medium.scatteringRay * RayleighPhaseValue;
			}
			else
			{
				PhaseTimesScattering = medium.scattering * uniformPhase;
			}

			// Earth shadow 
			float tEarth = RaySphereIntersectNearest(P, SunDir, earthO + 0.01f * UpVector, Atmosphere.BottomRadius);
			float earthShadow = tEarth >= 0.0f ? 0.0f : 1.0f;

			// Dual scattering for multi scattering 

			float3 multiScatteredLuminance = 0.0f;
			if (MultiScatteringApproximationEnabled)
			{
				multiScatteredLuminance = GetMultipleScattering(Atmosphere, medium.scattering, medium.extinction, P, SunZenithCosAngle);
			}

			float shadow = 1.0f;
	#if SHADOWMAP_ENABLED
			// First evaluate opaque shadow
			shadow = getShadow(Atmosphere, P);
	#endif

			float3 S = globalL * (earthShadow * shadow * TransmittanceToSun * PhaseTimesScattering + multiScatteredLuminance * medium.scattering);

			// When using the power serie to accumulate all sattering order, serie r must be <1 for a serie to converge.
			// Under extreme coefficient, MultiScatAs1 can grow larger and thus result in broken visuals.
			// The way to fix that is to use a proper analytical integration as proposed in slide 28 of http://www.frostbite.com/2015/08/physically-based-unified-volumetric-rendering-in-frostbite/
			// However, it is possible to disable as it can also work using simple power serie sum unroll up to 5th order. The rest of the orders has a really low contribution.
	#define MULTI_SCATTERING_POWER_SERIE 1

	#if MULTI_SCATTERING_POWER_SERIE==0
			// 1 is the integration of luminance over the 4pi of a sphere, and assuming an isotropic phase function of 1.0/(4*PI)
			result.MultiScatAs1 += throughput * medium.scattering * 1 * dt;
	#else
			float3 MS = medium.scattering * 1;
			float3 MSint = (MS - MS * SampleTransmittance) / medium.extinction;
			result.MultiScatAs1 += throughput * MSint;
	#endif

			// Evaluate input to multi scattering 
			{
				float3 newMS;

				newMS = earthShadow * TransmittanceToSun * medium.scattering * uniformPhase * 1;
				result.NewMultiScatStep0Out += throughput * (newMS - newMS * SampleTransmittance) / medium.extinction;
				//	result.NewMultiScatStep0Out += SampleTransmittance * throughput * newMS * dt;

				newMS = medium.scattering * uniformPhase * multiScatteredLuminance;
				result.NewMultiScatStep1Out += throughput * (newMS - newMS * SampleTransmittance) / medium.extinction;
				//	result.NewMultiScatStep1Out += SampleTransmittance * throughput * newMS * dt;
			}

			// See slide 28 at http://www.frostbite.com/2015/08/physically-based-unified-volumetric-rendering-in-frostbite/ 
			float3 Sint = (S - S * SampleTransmittance) / medium.extinction;	// integrate along the current step segment 
			L += throughput * Sint;														// accumulate and also take into account the transmittance from previous steps
			throughput *= SampleTransmittance;

			tPrev = t;
		}

		if (ground && tMax == tBottom && tBottom > 0.0)
		{
			// Account for bounced light off the earth
			float3 P = WorldPos + tBottom * WorldDir;
			float pHeight = length(P);

			const float3 UpVector = P / pHeight;
			float SunZenithCosAngle = dot(SunDir, UpVector);
			float2 uv;
			LutTransmittanceParamsToUv(Atmosphere, pHeight, SunZenithCosAngle, uv);
			float3 TransmittanceToSun = TransmittanceLutTexture.SampleLevel(samplerLinearClamp, uv, 0).rgb;

			const float NdotL = saturate(dot(normalize(UpVector), normalize(SunDir)));
			L += globalL * TransmittanceToSun * throughput * NdotL * Atmosphere.GroundAlbedo / PI;
		}

		result.L = L;
		result.OpticalDepth = OpticalDepth;
		result.Transmittance = throughput;
		return result;
	}

	void UvToLutTransmittanceParams(AtmosphereParameters Atmosphere, out float viewHeight, out float viewZenithCosAngle, in float2 uv)
	{
		float x_mu = uv.x;
		float x_r = uv.y;

		float H = sqrt(Atmosphere.TopRadius * Atmosphere.TopRadius - Atmosphere.BottomRadius * Atmosphere.BottomRadius);
		float rho = H * x_r;
		viewHeight = sqrt(rho * rho + Atmosphere.BottomRadius * Atmosphere.BottomRadius);

		float d_min = Atmosphere.TopRadius - viewHeight;
		float d_max = rho + H;
		float d = d_min + x_mu * (d_max - d_min);
		viewZenithCosAngle = d == 0.0 ? 1.0f : (H * H - rho * rho - d * d) / (2.0 * viewHeight * d);
		viewZenithCosAngle = clamp(viewZenithCosAngle, -1.0, 1.0);
	}

	float fromUnitToSubUvs(float u, float resolution) { return (u + 0.5f / resolution) * (resolution / (resolution + 1.0f)); }
	float2 fromSubUvsToUnit(float2 uv, float4 resolution) { return (uv - resolution.zw * 0.5f) * (resolution.xy / (resolution.xy - 1.0f)); }

	void UvToSkyViewLutParams(AtmosphereParameters Atmosphere, out float viewZenithCosAngle, out float lightViewCosAngle, in float viewHeight, in float2 uv)
	{
		// Constrain uvs to valid sub texel range (avoid zenith derivative issue making LUT usage visible)
		// TODO: Readd this to make things better
		// We get weird errors resulting in NaN if we don't hardcode the resolution :/ it's quite weird, might be due to optimizations when the values are know at compilation time
		//uv = fromSubUvsToUnit(uv.xy, float4(192, 108, SkyViewLutResolution.z, SkyViewLutResolution.w));

		float Vhorizon = sqrt(viewHeight * viewHeight - Atmosphere.BottomRadius * Atmosphere.BottomRadius);
		float CosBeta = Vhorizon / viewHeight;				// GroundToHorizonCos
		float Beta = acos(CosBeta);
		float ZenithHorizonAngle = PI - Beta;

		if (uv.y < 0.5f)
		{
			float coord = 2.0f * uv.y;
			coord = 1.0f - coord;
			coord *= coord;
			coord = 1.0f - coord;

			viewZenithCosAngle = cos(ZenithHorizonAngle * coord);
		}
		else
		{
			float coord = uv.y * 2.0f - 1.0f;
			coord *= coord;

			viewZenithCosAngle = cos(ZenithHorizonAngle + Beta * coord);
		}

		float coord = uv.x;
		coord *= coord;

		lightViewCosAngle = -(coord * 2.0f - 1.0f);
	}

	void SkyViewLutParamsToUv(AtmosphereParameters Atmosphere, in bool IntersectGround, in float viewZenithCosAngle, in float lightViewCosAngle, in float viewHeight, out float2 uv)
	{
		float Vhorizon = sqrt(viewHeight * viewHeight - Atmosphere.BottomRadius * Atmosphere.BottomRadius);
		float CosBeta = Vhorizon / viewHeight;				// GroundToHorizonCos
		float Beta = acos(CosBeta);
		float ZenithHorizonAngle = PI - Beta;

		if (!IntersectGround)
		{
			float coord = acos(viewZenithCosAngle) / ZenithHorizonAngle;
			coord = 1.0 - coord;
			coord = sqrt(coord);
			coord = 1.0 - coord;

			uv.y = coord * 0.5f;
		}
		else
		{
			float coord = (acos(viewZenithCosAngle) - ZenithHorizonAngle) / Beta;
			coord = sqrt(coord);

			uv.y = coord * 0.5f + 0.5f;
		}

		{
			float coord = -lightViewCosAngle * 0.5f + 0.5f;
			coord = sqrt(coord);
			uv.x = coord;
		}

		// Constrain uvs to valid sub texel range (avoid zenith derivative issue making LUT usage visible)
		uv = float2(fromUnitToSubUvs(uv.x, SkyViewLutResolution.x), fromUnitToSubUvs(uv.y, SkyViewLutResolution.y));
	}
};