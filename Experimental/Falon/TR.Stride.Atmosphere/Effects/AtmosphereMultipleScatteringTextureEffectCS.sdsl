

shader AtmosphereMultipleScatteringTextureEffectCS<bool MultiScatteringApproximationEnabled, MemberName AtmosphereGroup> 
	: ComputeShaderBase, AtmosphereRenderSkyCommon<MultiScatteringApproximationEnabled, AtmosphereGroup>
{
	stage RWTexture2D<float4>  OutputTexture;

	groupshared float3 MultiScatAs1SharedMem[64];
	groupshared float3 LSharedMem[64];

    override void Compute()
    {
        float2 pixPos = float2(streams.DispatchThreadId.xy) + 0.5f;

        float2 uv = pixPos / MultiScatteringLutResolution.xy;
		uv = fromSubUvsToUnit(uv, MultiScatteringLutResolution);

		AtmosphereParameters Atmosphere = GetAtmosphereParameters();

		float cosSunZenithAngle = uv.x * 2.0 - 1.0;
		float3 sunDir = float3(0.0, sqrt(saturate(1.0 - cosSunZenithAngle * cosSunZenithAngle)), cosSunZenithAngle);
		// We adjust again viewHeight according to PLANET_RADIUS_OFFSET to be in a valid range.
		float viewHeight = Atmosphere.BottomRadius + saturate(uv.y + 0.01f) * (Atmosphere.TopRadius - Atmosphere.BottomRadius - 0.01f);

		float3 WorldPos = float3(0.0f, 0.0f, viewHeight);
		float3 WorldDir = float3(0.0f, 0.0f, 1.0f);

		const bool ground = true;
		const float SampleCountIni = 20;// a minimum set of step is required for accuracy unfortunately
		const float DepthBufferValue = -1.0;
		const bool VariableSampleCount = false;
		const bool MieRayPhase = false;
		const float AerialPespectiveViewDistanceScale = 1.0f;

		const float SphereSolidAngle = 4.0 * PI;
		const float IsotropicPhase = 1.0 / SphereSolidAngle;

		// Reference. Since there are many sample, it requires MULTI_SCATTERING_POWER_SERIE to be true for accuracy and to avoid divergences (see declaration for explanations)
	#define SQRTSAMPLECOUNT 8
		const float sqrtSample = float(SQRTSAMPLECOUNT);
		float i = 0.5f + float(streams.DispatchThreadId.z / SQRTSAMPLECOUNT);
		float j = 0.5f + float(streams.DispatchThreadId.z - float((streams.DispatchThreadId.z / SQRTSAMPLECOUNT)*SQRTSAMPLECOUNT));
		{
			float randA = i / sqrtSample;
			float randB = j / sqrtSample;
			float theta = 2.0f * PI * randA;
			float phi = PI * randB;
			float cosPhi = cos(phi);
			float sinPhi = sin(phi);
			float cosTheta = cos(theta);
			float sinTheta = sin(theta);
			WorldDir.x = cosTheta * sinPhi;
			WorldDir.y = sinTheta * sinPhi;
			WorldDir.z = cosPhi;
			SingleScatteringResult result = IntegrateScatteredLuminance(pixPos, WorldPos, WorldDir, sunDir, Atmosphere, ground, SampleCountIni, DepthBufferValue, VariableSampleCount, MieRayPhase, AerialPespectiveViewDistanceScale);

			MultiScatAs1SharedMem[streams.DispatchThreadId.z] = result.MultiScatAs1 * SphereSolidAngle / (sqrtSample * sqrtSample);
			LSharedMem[streams.DispatchThreadId.z] = result.L * SphereSolidAngle / (sqrtSample * sqrtSample);
		}
	#undef SQRTSAMPLECOUNT

		GroupMemoryBarrierWithGroupSync();

		// 64 to 32
		if (streams.DispatchThreadId.z < 32)
		{
			MultiScatAs1SharedMem[streams.DispatchThreadId.z] += MultiScatAs1SharedMem[streams.DispatchThreadId.z + 32];
			LSharedMem[streams.DispatchThreadId.z] += LSharedMem[streams.DispatchThreadId.z + 32];
		}
		GroupMemoryBarrierWithGroupSync();

		// 32 to 16
		if (streams.DispatchThreadId.z < 16)
		{
			MultiScatAs1SharedMem[streams.DispatchThreadId.z] += MultiScatAs1SharedMem[streams.DispatchThreadId.z + 16];
			LSharedMem[streams.DispatchThreadId.z] += LSharedMem[streams.DispatchThreadId.z + 16];
		}
		GroupMemoryBarrierWithGroupSync();

		// 16 to 8 (16 is thread group min hardware size with intel, no sync required from there)
		if (streams.DispatchThreadId.z < 8)
		{
			MultiScatAs1SharedMem[streams.DispatchThreadId.z] += MultiScatAs1SharedMem[streams.DispatchThreadId.z + 8];
			LSharedMem[streams.DispatchThreadId.z] += LSharedMem[streams.DispatchThreadId.z + 8];
		}
		GroupMemoryBarrierWithGroupSync();
		if (streams.DispatchThreadId.z < 4)
		{
			MultiScatAs1SharedMem[streams.DispatchThreadId.z] += MultiScatAs1SharedMem[streams.DispatchThreadId.z + 4];
			LSharedMem[streams.DispatchThreadId.z] += LSharedMem[streams.DispatchThreadId.z + 4];
		}
		GroupMemoryBarrierWithGroupSync();
		if (streams.DispatchThreadId.z < 2)
		{
			MultiScatAs1SharedMem[streams.DispatchThreadId.z] += MultiScatAs1SharedMem[streams.DispatchThreadId.z + 2];
			LSharedMem[streams.DispatchThreadId.z] += LSharedMem[streams.DispatchThreadId.z + 2];
		}
		GroupMemoryBarrierWithGroupSync();
		if (streams.DispatchThreadId.z < 1)
		{
			MultiScatAs1SharedMem[streams.DispatchThreadId.z] += MultiScatAs1SharedMem[streams.DispatchThreadId.z + 1];
			LSharedMem[streams.DispatchThreadId.z] += LSharedMem[streams.DispatchThreadId.z + 1];
		}
		GroupMemoryBarrierWithGroupSync();
		if (streams.DispatchThreadId.z > 0)
			return;

		float3 MultiScatAs1			= MultiScatAs1SharedMem[0] * IsotropicPhase;	// Equation 7 f_ms
		float3 InScatteredLuminance	= LSharedMem[0] * IsotropicPhase;				// Equation 5 L_2ndOrder

		// MultiScatAs1 represents the amount of luminance scattered as if the integral of scattered luminance over the sphere would be 1.
		//  - 1st order of scattering: one can ray-march a straight path as usual over the sphere. That is InScatteredLuminance.
		//  - 2nd order of scattering: the inscattered luminance is InScatteredLuminance at each of samples of fist order integration. Assuming a uniform phase function that is represented by MultiScatAs1,
		//  - 3nd order of scattering: the inscattered luminance is (InScatteredLuminance * MultiScatAs1 * MultiScatAs1)
		//  - etc.
	#define MULTI_SCATTERING_POWER_SERIE 1
	#if	MULTI_SCATTERING_POWER_SERIE==0
		float3 MultiScatAs1SQR = MultiScatAs1 * MultiScatAs1;
		float3 L = InScatteredLuminance * (1.0 + MultiScatAs1 + MultiScatAs1SQR + MultiScatAs1 * MultiScatAs1SQR + MultiScatAs1SQR * MultiScatAs1SQR);
	#else
		// For a serie, sum_{n=0}^{n=+inf} = 1 + r + r^2 + r^3 + ... + r^n = 1 / (1.0 - r), see https://en.wikipedia.org/wiki/Geometric_series 
		const float3 r = MultiScatAs1;
		const float3 SumOfAllMultiScatteringEventsContribution = 1.0f / (1.0 - r);
		float3 L = InScatteredLuminance * SumOfAllMultiScatteringEventsContribution;// Equation 10 Psi_ms
	#endif

		OutputTexture[streams.DispatchThreadId.xy] = float4(MultipleScatteringFactor * L, 1.0f);
    }
};