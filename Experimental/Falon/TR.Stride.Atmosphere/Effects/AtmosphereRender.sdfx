

params AtmosphereParameters
{
    bool FastSkyEnabled = false;
    bool FastAerialPerspectiveEnabled = false;
    bool RenderSunDisk = true;
    bool MultiScatteringApproximationEnabled = true;
    bool EnableClouds = true;
    string AtmosphereGroup = "PerDraw.Atmosphere";
}

effect AtmosphereRenderSkyRayMarchingEffect
{
    using params AtmosphereParameters;

    mixin AtmosphereRenderSkyRayMarching<
        AtmosphereParameters.FastSkyEnabled, 
        AtmosphereParameters.FastAerialPerspectiveEnabled,
        AtmosphereParameters.RenderSunDisk,
        AtmosphereParameters.MultiScatteringApproximationEnabled, 
        AtmosphereParameters.EnableClouds, 
        AtmosphereParameters.AtmosphereGroup>;
};

effect AtmosphereRenderTransmittanceLutEffect
{
    using params AtmosphereParameters; 

    mixin AtmosphereRenderTransmittanceLut<AtmosphereParameters.MultiScatteringApproximationEnabled, AtmosphereParameters.AtmosphereGroup>;
};

effect AtmosphereMultipleScatteringTextureEffect
{
    using params AtmosphereParameters;

    mixin AtmosphereMultipleScatteringTextureEffectCS<AtmosphereParameters.MultiScatteringApproximationEnabled, AtmosphereParameters.AtmosphereGroup>;
};

effect AtmosphereRenderSkyViewLutEffect
{
    using params AtmosphereParameters;

    mixin AtmosphereRenderSkyViewLut<AtmosphereParameters.MultiScatteringApproximationEnabled, AtmosphereParameters.AtmosphereGroup>;
}

effect AtmosphereRenderScatteringCameraVolumeEffect
{
    using params AtmosphereParameters;

    mixin AtmosphereRenderScatteringCameraVolume<AtmosphereParameters.MultiScatteringApproximationEnabled, AtmosphereParameters.AtmosphereGroup>;
}